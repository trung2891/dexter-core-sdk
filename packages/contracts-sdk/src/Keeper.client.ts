/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.28.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {Addr, Uint128, AssetInfo, Asset, Description} from "./types";
import {InstantiateMsg, ExecuteMsg, QueryMsg, BalancesResponse} from "./Keeper.types";
export interface KeeperReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Description>;
  balances: ({
    assets
  }: {
    assets: AssetInfo[];
  }) => Promise<BalancesResponse>;
}
export class KeeperQueryClient implements KeeperReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.balances = this.balances.bind(this);
  }

  config = async (): Promise<Description> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  balances = async ({
    assets
  }: {
    assets: AssetInfo[];
  }): Promise<BalancesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      balances: {
        assets
      }
    });
  };
}
export interface KeeperInterface extends KeeperReadOnlyInterface {
  contractAddress: string;
  sender: string;
  withdraw: ({
    amount,
    asset,
    recipient
  }: {
    amount: Uint128;
    asset: AssetInfo;
    recipient?: Addr;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
  exitLPTokens: ({
    amount,
    lpTokenAddress,
    minAssetsReceived
  }: {
    amount: Uint128;
    lpTokenAddress: string;
    minAssetsReceived?: Asset[];
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
  swapAsset: ({
    askAssetInfo,
    minAskAmount,
    offerAsset,
    poolId
  }: {
    askAssetInfo: AssetInfo;
    minAskAmount?: Uint128;
    offerAsset: Asset;
    poolId: Uint128;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
  proposeNewOwner: ({
    expiresIn,
    owner
  }: {
    expiresIn: number;
    owner: string;
  }, $fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
  dropOwnershipProposal: ($fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
  claimOwnership: ($fee?: number | StdFee | "auto", $memo?: string, $funds?: Coin[]) => Promise<ExecuteResult>;
}
export class KeeperClient extends KeeperQueryClient implements KeeperInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.withdraw = this.withdraw.bind(this);
    this.exitLPTokens = this.exitLPTokens.bind(this);
    this.swapAsset = this.swapAsset.bind(this);
    this.proposeNewOwner = this.proposeNewOwner.bind(this);
    this.dropOwnershipProposal = this.dropOwnershipProposal.bind(this);
    this.claimOwnership = this.claimOwnership.bind(this);
  }

  withdraw = async ({
    amount,
    asset,
    recipient
  }: {
    amount: Uint128;
    asset: AssetInfo;
    recipient?: Addr;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {
        amount,
        asset,
        recipient
      }
    }, $fee, $memo, $funds);
  };
  exitLPTokens = async ({
    amount,
    lpTokenAddress,
    minAssetsReceived
  }: {
    amount: Uint128;
    lpTokenAddress: string;
    minAssetsReceived?: Asset[];
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      exit_l_p_tokens: {
        amount,
        lp_token_address: lpTokenAddress,
        min_assets_received: minAssetsReceived
      }
    }, $fee, $memo, $funds);
  };
  swapAsset = async ({
    askAssetInfo,
    minAskAmount,
    offerAsset,
    poolId
  }: {
    askAssetInfo: AssetInfo;
    minAskAmount?: Uint128;
    offerAsset: Asset;
    poolId: Uint128;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      swap_asset: {
        ask_asset_info: askAssetInfo,
        min_ask_amount: minAskAmount,
        offer_asset: offerAsset,
        pool_id: poolId
      }
    }, $fee, $memo, $funds);
  };
  proposeNewOwner = async ({
    expiresIn,
    owner
  }: {
    expiresIn: number;
    owner: string;
  }, $fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      propose_new_owner: {
        expires_in: expiresIn,
        owner
      }
    }, $fee, $memo, $funds);
  };
  dropOwnershipProposal = async ($fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      drop_ownership_proposal: {}
    }, $fee, $memo, $funds);
  };
  claimOwnership = async ($fee: number | StdFee | "auto" = "auto", $memo?: string, $funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim_ownership: {}
    }, $fee, $memo, $funds);
  };
}